SSH2 Moduli File Generator
==========================

**Generate Complete and Secure SSH2 Moduli files**


Overview
--------

Automatically Generate and Screen SSH2 Moduli, combining into appropriately secure SSH2 Moduli file.

The system utility SSH2 Installs typically include ``ssh-keygen.`` Why? The security of the SSH2 protocol relies on the
security (and obscurity) of your moduli. The protocol assumes you'll build your *own* moduli.

Chances are, you're using the moduli distributed with your O/S and sharing
it with millions of other recipients. You can generate and screen moduli with SSH2 yourself, as does this program.
However, you have to gather and organize your screened moduli into a moduli file, with a sufficient distribution
keysizes.

This program does that for you.


.. note:: *Elapsed time for complete run is about 3* **days** *on an Intel Quad Core i7*.
          It will produce a moduli file with 20 moduli each across keysizes 3071, 4095, 6143, 7679, and 8191 bits.


Quick Start
-----------

Development Install
~~~~~~~~~~~~~~~~~~~

    Clone Repository
        Clone Repository
            ``git clone git@github.com:beckerwilliams/moduli_generator.git``

        Set Current Working Directory @ project Root
            ``cd moduli_generator``

        Install Python Virtual Envrionment
            ``python -m venv .venv``

        Activate Virtual Environment
            ``source .venv/bin/activate[.{csh,fish}]``

            - Use form appropriate to your O/S

        Update Project Packages
            ``poetry update``

        Install Project Packages
            ``poetry install``

    Operation
        Commmand Line

            ``poetry run moduli_generator``

                - default run of all base moduli

            ``poetry run build_docs``

                :Docroot:
                    _build/html/index.html**

            ``poetry run db_moduli_stats``

                Prints count of qualified moduli by key-size

            ``poetry run write_moduli``

                Writes complete [*]/ssh/moduli file, and removes provided moduli from database

            ``poerty run update_readme``

                Updates requirements and versions from pyproject.toml

Platform Dependencies
~~~~~~~~~~~~~~~~~~~~~

System Requirements
    SSH2 Moduli Generator depends on SSH being installed and ssh-keygen available for Moduli production.

Python Requirements
    The following Python packages are required (automatically installed via Poetry):

    **Python Version:** ^3.12

    Runtime Dependencies:

    - **poetry-core** ^2.1.3
    - **mariadb** ^1.1.12
    - **configparser** ^7.2.0
    - **toml** ^0.10.2

    Development Dependencies:

    - **sphinx** ^7.2.6
    - **sphinxcontrib-jquery** ^4.1
    - **sphinx-rtd-theme** ^3.0.2

    All Python dependencies are managed through Poetry and will be installed automatically when you run ``poetry install``.....



Additional Capabilities
~~~~~~~~~~~~~~~~~~~~~~~

Build Wheel
    Create Distribution Directories
        ``mkdir dist _build _static _template``
    Build Source and Wheel Distributions
        ``poetry build``

    which should respond with

        Building moduli_generator (x.x.x)

        Building sdist

        - Building sdist

        - Built moduli_generator-x.x.x.tar.gz

        Building wheel

        - Building wheel

        - Built moduli_generator-x.x.x-py3-none-any.whl

    :Wheel Location: ``dist/moduli_generator-x.x.x-py3-none-any.whl``

Reference
---------

`SSH Audit <https://github.com/jtesta/ssh-audit>`_

`SSH Hardening Guides <https://www.ssh-audit.com/hardening_guides.html>`_

`HackTricks <https://book.hacktricks.xyz/network-services-pentesting/pentesting-ssh>`_

`On the Sufficient Number of Moduli by Keysize (grok) <https://x.com/i/grok/share/ioGsEbyEPkRYkfUfPMj1TuHgl>`_

Database Integration
--------------------

SSH2 Moduli Generator now includes MariaDB integration for storing and retrieving moduli values. 
This allows for persistent storage of generated moduli across sessions.



Technical Details
-----------------

Timestamp Format
~~~~~~~~~~~~~~~~

All timestamps in generated moduli files use a compressed format with no punctuation or spaces.
This ensures compatibility with all SSH implementations while maintaining proper chronological ordering.

Database Schema
~~~~~~~~~~~~~~~

The generator uses a view-based database schema that joins moduli values with their configuration constants.
This approach allows for efficient retrieval and consistent formatting of moduli entries.